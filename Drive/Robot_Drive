#include <Servo.h>
/* The 'Servo.h' library allows you to control motors and servos by passing any value between
0 and 180 into the "write" method (talon.write() in this program).
For a motor:   0 is full power in one direction,
             180 is full direction in the opposite direction,
              90 is stop.
For a servo:   0 is all the way one direction,
             180 is all the way in the opposite direction,
              90 is the middle.
*/



//Dirve global variables
Servo Right;//creates servo object for right side motors/motor controllers
Servo Left;//creates servo object for left side motors/motor controllers

int ch2; //left stick, controls thrust
int ch3; //right stick side to side, controls turning

int ch2Max = 1; //determine from calibration
int ch3Max = 1; //determine from calibration


//Candy shooting global variables
Servo SpinMotor; //creates servo object for spinning broadcast spreader
Servo CandyMotor; //Creates servo object for roatating motor to dispense candy

int ch5; //input from channel 5 of RC reciever, which is controlled by SWC (Switch C), controls candy shooting

boolean Shoot = false; //boolean to record state of shooting
int RecordTime;
char State = "off"; 

boolean SpinMotor1 = false; //records whether or not motor is spinning 
boolean CandyMotor1 = false; // records whether or not motor is spinning




void setup() {

  //input signal from RC reciever
  pinMode(2, INPUT);//thrust
  pinMode(3, INPUT);//turn
  pinMode(4, INPUT); // Set pin 4 as input from RC reciever

  
  //outputs signal after its changed to motor controlers
  Right.attach(8);//controls right side
  Left.attach(9);//controls left side
  
  SpinMotor.attach(7); //tells arduino to control pin 7 as a servo, which can also control DC motors
  CandyMotor.attach(6);//tells arduino to control pin 6 as a servo, which can also control DC motors

  Serial.begin(9600);
}

void loop() {


  //reads input level from controler
  ch2 = pulseIn(2, HIGH, 250000);//thrust
  ch3 = pulseIn(3, HIGH, 250000);//turn
  ch5 = pulseIn(4, HIGH, 250000); // Read the pulse width of incoming signal
  
  //prints out controler input in serial monitor
  Serial.print("Channel 2:"); // Print the value of 
  Serial.println(ch2);        // each channel

  Serial.print("Channel 3:"); // Print the value of 
  Serial.println(ch3);        // each channel


  int right; // used for storing input pulse values from reciever
  int left;

  //calculates magnitude of value
  right = ch2 - ch3; //right side turn mixing, combines thrust with amount you want to turn.
  left =  ch2 + ch3; //left side turn mixing, combines thrust with amount you want to turn.

  //limits speed/motor controller curent to safe (max) limits 
  if(right > ch2Max){
    right = ch2Max;
  }

  if(left > ch2Max){
    left = ch2Max;
  }

  //gives motors a value to rotate at
  Right.write((right / ch2Max) * 90);
  Left.write((left / ch2Max) * 90); 




  //Candy Shooting control
  
  if(ch5>1500){//switch is turned on
    Shoot = true;
  } 
  
  if(ch5<1500){//switch is turned off   
    Shoot = false; 
  }




  //Begin spining broadcast spreader, change state to startup
  if(Shoot == true && State == "off"){
    SpinMotor.write(135);//number controls motor speed and direction
    RecordTime = millis(); //records time when ececuted to be used for delay until desired time
    State = "start up"; //changes state s
  }

  //start shooting candy
  else if(Shoot == true && State == "start up" && millis() >= RecordTime + 500 ){
    CandyMotor.write(110); //number controls motor speed and direction
    RecordTime = millis();
    State = "shooting sequence";
  }

   //continues shooting if switch is left on 
   else if(Shoot == true && State == "shooting sequence" && millis() >= RecordTime + 2000 ){
    RecordTime = millis();
    State = "continous shooting";
  }

  //shut down, stop shooting if switch was just turned on and off rapidly
  else if(Shoot == false && State == "shooting sequence" && millis() >= RecordTime + 2000 ){
    CandyMotor.write(90); //number controls motor speed and direction
    RecordTime = millis();
    State = "shut down";
  }
  
  //stops shooting if robot was in continous shooting state 
  else if(Shoot == false && State == "continous shooting" && millis() >= RecordTime){
    CandyMotor.write(90); //number controls motor speed and direction
    RecordTime = millis(); //reset timer
    State = "shut down"; //enters shutdown
  }

  //turns off broadcastspreader motot, changes state to shutdown
  else if(Shoot == false && State == "shut down" && millis() >= RecordTime + 500){
    SpinMotor.write(90); // turns off broadcast spreader
    State = "off"; //turns state to off
  }

  
}
